FROM alpine:3.19 AS base
LABEL maintainer="QLever WASM"

ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV LC_CTYPE=C.UTF-8

FROM base AS builder

# Install build dependencies including Python for Emscripten
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    git \
    wget \
    curl \
    bash \
    pkgconfig \
    icu-dev \
    openssl-dev \
    zstd-dev \
    zlib-dev \
    jemalloc-dev \
    boost-dev \
    linux-headers \
    util-linux-dev \
    python3 \
    python3-dev \
    nodejs \
    npm

# Install Emscripten
WORKDIR /opt
RUN git clone https://github.com/emscripten-core/emsdk.git
WORKDIR /opt/emsdk
RUN ./emsdk install latest
RUN ./emsdk activate latest

# Source emsdk environment
ENV PATH="/opt/emsdk:/opt/emsdk/upstream/emscripten:${PATH}"
ENV EMSDK="/opt/emsdk"
ENV EM_CONFIG="/opt/emsdk/.emscripten"
ENV EMSDK_NODE="/opt/emsdk/node/18.20.3_64bit/bin/node"

# Copy source files
COPY src /qlever/src/
COPY test /qlever/test/
COPY benchmark /qlever/benchmark/
COPY CMakeLists.txt /qlever/
COPY CompilationInfo.cmake /qlever/

# Build WASM version of QLever
WORKDIR /qlever/build-wasm/

# Configure for WASM build
RUN . /opt/emsdk/emsdk_env.sh && \
    emcmake cmake -DCMAKE_BUILD_TYPE=Release \
                  -DLOGLEVEL=INFO \
                  -DCMAKE_CXX_FLAGS="-Wno-psabi -O3" \
                  -GNinja \
                  -DEMSCRIPTEN=ON \
                  -DUSE_PRECOMPILED_HEADERS=OFF \
                  ..

# Build the WASM module
RUN . /opt/emsdk/emsdk_env.sh && \
    cmake --build . --target qlever-wasm-module

# Runtime stage - contains WASM files and web server
FROM nginx:alpine AS runtime
WORKDIR /usr/share/nginx/html

# Copy WASM files
COPY --from=builder /qlever/build-wasm/qlever-wasm.js ./
COPY --from=builder /qlever/build-wasm/qlever-wasm.wasm ./

# Copy example files
COPY examples/wasm/index.html ./
COPY examples/wasm/README.md ./

# Configure nginx for WASM serving
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        add_header Cross-Origin-Embedder-Policy require-corp; \
        add_header Cross-Origin-Opener-Policy same-origin; \
        location ~* \\.wasm$ { \
            add_header Content-Type application/wasm; \
        } \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]