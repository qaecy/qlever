# Lightweight Demo Build for QLever WASM
FROM --platform=linux/amd64 emscripten/emsdk:latest

USER root
RUN apt-get update && apt-get install -y \
    ninja-build \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install newer CMake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.28.1/cmake-3.28.1-linux-x86_64.tar.gz && \
    tar -xzf cmake-3.28.1-linux-x86_64.tar.gz -C /opt && \
    rm cmake-3.28.1-linux-x86_64.tar.gz && \
    ln -sf /opt/cmake-3.28.1-linux-x86_64/bin/cmake /usr/local/bin/cmake

# Demo QLever WASM Build
# This creates a minimal demonstration WASM build without external dependencies
FROM emscripten/emsdk:3.1.50

WORKDIR /src

# Copy only the files we need for the demo
COPY src/qlever-wasm/QleverWasmDemo.cpp ./QleverWasmDemo.cpp

# Build the WASM demo
RUN emcc -O3 -s WASM=1 -s EXPORTED_FUNCTIONS="['_malloc','_free']" \
    -s EXPORTED_RUNTIME_METHODS="['ccall','cwrap']" \
    -s MODULARIZE=1 -s EXPORT_NAME="'QleverWasmModule'" \
    -s ALLOW_MEMORY_GROWTH=1 \
    --bind \
    QleverWasmDemo.cpp \
    -o qlever-wasm-demo.js

# Create output directory for easy extraction
RUN mkdir -p /output && \
    cp qlever-wasm-demo.js /output/ && \
    cp qlever-wasm-demo.wasm /output/

# List files for verification
RUN ls -la /output/

# Copy only the demo source
COPY src/qlever-wasm/QleverWasmDemo.cpp /qlever/

WORKDIR /qlever

# Build the demo WASM module
RUN em++ QleverWasmDemo.cpp \
    -o qlever-wasm-demo.js \
    -std=c++20 \
    -O3 \
    -s WASM=1 \
    -s MODULARIZE=1 \
    -s EXPORT_NAME='QleverModule' \
    -s ENVIRONMENT='web,worker' \
    -s ALLOW_MEMORY_GROWTH=1 \
    --bind

# Verify files were created
RUN ls -la qlever-wasm-demo.*

CMD ["tail", "-f", "/dev/null"]